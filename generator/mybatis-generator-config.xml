<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "https://mybatis-generator.oss-cn-shanghai.aliyuncs.com/mybatis-generator-config_1_0.dtd"
  >

<!--Mybatis Generator配置文件-->
<generatorConfiguration>

  <!--如果使用Mybatis DS Generator, targetRuntime只能指定为MyBatis3DynamicSql-->
  <context id="MysqlContext" defaultModelType="flat" targetRuntime="MyBatis3DynamicSql">
    <property name="autoDelimitKeywords" value="true"/>
    <property name="beginningDelimiter" value="`"/>
    <property name="endingDelimiter" value="`"/>
    <property name="javaFileEncoding" value="UTF-8"/>

    <property name="projectRootAlias" value="/@/"/>

    <property name="apiTargetPackage" value="generated.api"/>
    <property name="enumTargetPackage" value="generated.model.enum"/>
    <property name="templateBaseDir" value="${templateBaseDir}"/>

    <!--指定需要使用的plugin, LombokAnnotationPlugin用于生成lombok注解, -->
    <!--plugin之间存在顺序关系, 为了生成代码的美观, 建议将SerializablePlugin放到最后-->
    <!-- 字段添加JavaDoc -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.MyBatisExtPlugin"/>

    <!-- 状态枚举生成插件 -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.EnumTypeStatusPlugin">
      <!-- 是否开启自动扫描根据约定注释格式生成枚举，默认true -->
      <property name="autoScan" value="true"/>
      <!-- autoScan为false,这里可以定义全局需要检查生成枚举类的列名 -->
      <!--<property name="enumColumns" value="grade_type"/>-->
    </plugin>

    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TypescriptModelPlugin">
      <property name="pojoRequestRootClass" value="com.accenture.abg.coe.kernel.rule.pojo.request.BaseRequest"/>
    </plugin>

    <!-- 生成API接口 -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TypescriptRestApiPlugin">
      <property name="writeMode" value="OVER_WRITE"/>
      <property name="apiPrefix" value="/ent-example"/>
    </plugin>
<!--    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TemplateModelViewPlugin">
      <property name="writeMode" value="OVER_WRITE"/>
      <property name="enableSubPackages" value="false"/>
      <property name="targetPackage" value="generated.api"/>
      <property name="templatePath" value="plugin/web/api.ftl"/>
      <property name="fileName" value="%s" />
      <property name="fileExt" value=".ts"/>
      <property name="var_apiPrefix" value="/ent-example"/>
    </plugin>-->
    <!-- 生成列表页面 -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TemplateModelViewPlugin">
      <property name="writeMode" value="OVER_WRITE"/>
      <property name="targetPackage" value="views.generated"/>
      <property name="templatePath" value="plugin/web/list.ftl"/>
      <property name="fileName" value="%s.list" />
      <property name="fileExt" value=".vue"/>
      <property name="var_apiPath" value="generated/api"/>
    </plugin>
    <!-- 生成明细页面 -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TemplateModelViewPlugin">
      <property name="writeMode" value="OVER_WRITE"/>
      <property name="targetPackage" value="views.generated"/>
      <property name="templatePath" value="plugin/web/detail.ftl"/>
      <property name="fileName" value="%s.detail" />
      <property name="fileExt" value=".vue"/>
      <property name="var_apiPath" value="generated/api"/>
    </plugin>
    <!-- 生成表单配置数据 -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TemplateModelViewPlugin">
      <property name="writeMode" value="OVER_WRITE"/>
      <property name="targetPackage" value="views.generated"/>
      <property name="templatePath" value="plugin/web/data.ftl"/>
      <property name="fileName" value="%s.data" />
      <property name="fileExt" value=".ts"/>
      <property name="var_apiPath" value="generated/api"/>
    </plugin>
    <!-- 生成路由信息 -->
    <plugin type="com.accenture.abg.coe.kernel.db.generator.plugin.web.TemplateGenericViewPlugin">
      <property name="writeMode" value="OVER_WRITE"/>
      <property name="targetPackage" value="routes"/>
      <property name="templatePath" value="plugin/web/route.ftl"/>
      <property name="fileName" value="example" />
      <property name="fileExt" value=".ts"/>
      <property name="var_viewPath" value="views/generated"/>
      <property name="var_routerPrefixPath" value="/example"/>
    </plugin>

    <!--不生成任何MBG自带的Generated注释-->
    <commentGenerator type="com.accenture.abg.coe.kernel.db.generator.comment.SimpleCommentGenerator"/>

    <!--指定Mybatis Generator运行时连接的数据库, 这里选用h2内存数据库-->
    <jdbcConnection
      driverClass="com.mysql.cj.jdbc.Driver"
      connectionURL="jdbc:mysql://localhost:3306/example_ds_assign?allowPublicKeyRetrieval=true&amp;useSSL=false"
      userId="root"
      password="123"
    />

    <!--指定java类型处理器, 如果有自定义的类型, 需要进行指定-->
    <javaTypeResolver type="">
      <property name="forceBigDecimals" value="false"/>
      <property name="useJSR310Types" value="true"/>
    </javaTypeResolver>

    <!--Model类的生成配置-->
    <!--路径是targetProject/targetPackage, targetProject必须已经存在, 如果指定为MAVEN则使用pom文件中outputDirectory定义的位置-->
    <javaModelGenerator targetPackage="generated.model" targetProject="MAVEN">
      <property name="constructorBased" value="false"/>
      <property name="enableSubPackages" value="false"/>
      <property name="immutable" value="false"/>
      <property name="trimStrings" value="true"/>
      <property name="rootClass" value="com.accenture.abg.coe.kernel.db.api.pojo.entity.BaseEntity"/>
    </javaModelGenerator>

    <columnOverride column="status_flag" javaType="com.accenture.abg.coe.kernel.rule.enums.StatusEnum" />
    <columnOverride column="tech_courses" javaType="java.util.List" typeHandler="com.accenture.abg.coe.kernel.db.api.handler.StringListHandler">
      <genericType javaType="String"/>
    </columnOverride>
    <columnOverride column="take_courses" javaType="java.util.List" typeHandler="com.accenture.abg.coe.kernel.db.api.handler.StringListHandler">
      <genericType javaType="String"/>
    </columnOverride>
    <columnOverride column="score" javaType="java.util.Map" typeHandler="com.accenture.abg.coe.kernel.db.api.handler.ScoreMapHandler">
      <genericType javaType="String"/>
      <genericType javaType="Integer"/>
    </columnOverride>

    <!--指定需要扫描的表, table标签可以有多个, 甚至可以逐表配置, 也可以统一配置-->
    <!--注意：由于使用了h2的内存模式, 系统表和用户表放在一起, 所以用户表一定要有一种方式能够区分, 否则系统表也会生成Model和Mapper类-->
    <!--例子中用户表都以exam开头命名, 所以过滤出所有exam开头的表就可以了-->
    <!--注意：table标签中还可以指定catalog和schema,但是h2和mysql的catalog/schema概念并不一致, 所以不能指定, 否则生成的mapper类只能用于h2-->
    <table tableName="exam%">
      <!--generatedKey标签用于指定主键 JDBC类型：数据库自动生成 -->
      <!--generatedKey 可以不指定，那么在insert之前需要指定数据pk值 -->
      <!--<generatedKey column="id" sqlStatement="JDBC" />-->
      <!--domainObjectRenamingRule用于统一对表名做处理：
      为了区分系统表和用户表, 我们将用户表统一都以exam开头, 但是我在生存Model和Mapper类的时候不希望java类也都以Exam开头, 显得不够简洁,
      这时候就可以在domainObjectRenamingRule中配置将Exam替换为空(或者其他字符串), 注意这里要大写开头-->
      <domainObjectRenamingRule searchString="^Exam" replaceString=""/>
      <!--指定create_time和last_update_time不用生成到插入语句和更新语句当中, 这样在我们插入和更新的时候会忽略这两个字段,
      因为这两个字段我们希望数据库自动处理(而不是程序处理): create_time在创建的时候自动填入数值, 而last_update_time在每次更新的时候自动更新数值-->
<!--      <columnOverride column="create_time" isGeneratedAlways="true"/>
      <columnOverride column="update_time" isGeneratedAlways="true"/>-->
    </table>
    <table tableName="exam_teacher" displayField="name">
      <columnOverride column="properties" javaType="com.accenture.abg.coe.kernel.db.mds.ext.dto.TeachProperty" />
    </table>
    <table tableName="exam_student" logicDeleteColumn="del_flag" versionColumn="version_">
      <columnOverride column="del_flag" javaType="com.accenture.abg.coe.kernel.rule.enums.YesOrNotEnum" />
    </table>
    <joinConfig targetPackage="com.accenture.abg.coe.kernel.db.mds.example.mapper" targetProject="src/main/resources">
      <joinEntry leftTable="exam_class_grade">
        <joinTarget rightTable="exam_student" property="students" leftTableColumn="id" rightTableColumn="grade_id" joinType="MORE"/>
        <joinTarget rightTable="exam_teacher" property="regulator" leftTableColumn="regulator_id" rightTableColumn="id" joinType="ONE"/>
      </joinEntry>
    </joinConfig>
  </context>
</generatorConfiguration>
